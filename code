
const PAGE_ACCESS_TOKEN = "insert_acess_token_pae";
const API_URL = `https://graph.facebook.com/v21.0/me/messages?access_token=${PAGE_ACCESS_TOKEN}`;
const SHEET_ID = "google sheet id";

function doGet(e) {
   if (e.parameter['hub.verify_token'] === 'thuchi') {
    return ContentService.createTextOutput(e.parameter['hub.challenge']);
}}
function doPost(e) {

    if (e.parameter['hub.verify_token'] === 'thuchi') {
    return ContentService.createTextOutput(e.parameter['hub.challenge']);
  }
  const data = JSON.parse(e.postData.contents);
  
  data.entry.forEach(entry => {
    entry.messaging.forEach(event => {
      const senderId = event.sender.id;
      if (event.message && event.message.text) {
        const text = event.message.text;
        
        if (text.startsWith("/start")) {
          sendMessage(
            senderId,
            `Chào mừng bạn đến với ứng dụng quản lý tài chính cá nhân!\n\nHướng dẫn sử dụng:\n\n1. Thêm giao dịch:\n   Nhập theo cú pháp: <số tiền> <thu/chi> <mô tả>.\n\n2. Xem báo cáo:\n   - /report: Báo cáo tổng.\n   - /report mm/yyyy: Báo cáo tháng.\n   - /report dd/mm/yyyy: Báo cáo tuần (hiển thị tuần có ngày được chọn).\n   - Thêm "az" hoặc "za" sau lệnh để sắp xếp:\n     Ví dụ: /report az hoặc /report mm/yyyy za.\n\n3. Hủy giao dịch gần nhất:\n   - /undo: Xóa giao dịch gần nhất.\n\n4. Xóa toàn bộ dữ liệu:\n   - /reset: Xóa tất cả dữ liệu trên bảng tính.\n`
          );
        } else if (text.startsWith("/report")) {
          handleReport(senderId, text);
        } else if (text.startsWith("/reset")) {
          resetSheet(senderId);
        } else if (text.startsWith("/last")) {
          handleLastTransaction(senderId);
        
        } else if (text.startsWith("/undo")) {
          undoLast(senderId);
        } else {
          handleTransaction(senderId, text);
        }
      }
    });
  });

  return ContentService.createTextOutput(JSON.stringify({status: 'ok'})).setMimeType(ContentService.MimeType.JSON);
}


function handleTransaction(chatId, text) {
  const parts = text.split(" ");
  let amount = parts[0];
  let type = parts[1];
  let desc = parts.slice(2).join(" ");

  // Kiểm tra nếu chỉ có amount được gửi, đặt type mặc định là "chi"
  if (!["thu", "chi"].includes(type?.toLowerCase())) {
    desc = parts.slice(1).join(" ");
    type = "chi";
  }

  if (!isValidAmount(amount)) {
    sendMessage(chatId, "Lỗi: Nhập đúng cú pháp <số tiền> <thu/chi> <mô tả>.");
    return;
  }

  const sheet = getOrCreateMonthlySheet();
  sheet.appendRow([
    new Date(),
    type.toLowerCase(),
    parseAmount(amount),
    desc || "Không có mô tả",
  ]);

  sendMessage(chatId, `Đã thêm giao dịch:\nSố tiền: ${amount}\nLoại: ${type}\nMô tả: ${desc}`);
}



function handleReport(chatId, text) {
  const dateRegex = /\d{2}\/\d{4}|\d{2}\/\d{2}\/\d{4}/;
  const dateParam = text.match(dateRegex)?.[0];
  let filter = "all";
  let sortOrder = null;

  if (text.includes("az")) {
    sortOrder = "az";
  } else if (text.includes("za")) {
    sortOrder = "za";
  }

  let sheetName;
  if (dateParam) {
    if (dateParam.length === 7) {
      const [month, year] = dateParam.split('/');
      sheetName = `${month}/${year}`;
      filter = "month";
    } else {
      // Logic tuần
    }
  }

  const sheet = sheetName ? SpreadsheetApp.openById(SHEET_ID).getSheetByName(sheetName) : getOrCreateMonthlySheet();
  if (!sheet) {
    sendMessage(chatId, "Không tìm thấy dữ liệu cho tháng được yêu cầu.");
    return;
  }

  generateReport(chatId, sheet, filter, sortOrder);
}

function generateReport(chatId, sheet, filter, sortOrder) {
  const data = sheet.getDataRange().getValues().slice(1); // Bỏ qua dòng tiêu đề

  if (!data.length) {
    sendMessage(chatId, "Không có dữ liệu.");
    return;
  }

  const now = new Date();
  const filteredData = data.filter(([date]) => {
    const rowDate = new Date(date);
    if (filter === "month") {
      return rowDate.getMonth() === now.getMonth() && rowDate.getFullYear() === now.getFullYear();
    }
    return true; // Mặc định lọc tất cả nếu không có điều kiện cụ thể
  });

  if (sortOrder) {
    filteredData.sort((a, b) => {
      const amountA = a[2];
      const amountB = b[2];
      return sortOrder === "az" ? amountA - amountB : amountB - amountA;
    });
  }

  const incomeTransactions = [];
  const expenseTransactions = [];
  let [income, expense] = [0, 0];

  filteredData.forEach(([date, type, amount, desc]) => {
    const formattedDate = new Date(date).toLocaleString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour12: false,
    });

    const transaction = `${formatCurrency(amount)}: ${desc || "Không có mô tả"} (${formattedDate})`;

    if (type === "thu") {
      income += amount;
      incomeTransactions.push(`+ ${transaction}`);
    } else if (type === "chi") {
      expense += amount;
      expenseTransactions.push(`- ${transaction}`);
    }
  });

  if (!filteredData.length) {
    sendMessage(chatId, `Không có giao dịch cho tháng được yêu cầu.`);
    return;
  }

  const report = [
    `Báo cáo tháng ${now.toLocaleDateString("vi-VN", { month: '2-digit', year: 'numeric' })}:`,
    `Tổng thu: ${formatCurrency(income)}`,
    `Tổng chi: ${formatCurrency(expense)}`,
    `Cân đối: ${formatCurrency(income - expense)}`,
    "",
    "Giao dịch thu nhập cụ thể:",
    incomeTransactions.length ? incomeTransactions.join("\n") : "Không có giao dịch thu nhập.",
    "",
    "Giao dịch chi tiêu cụ thể:",
    expenseTransactions.length ? expenseTransactions.join("\n") : "Không có giao dịch chi tiêu.",
  ].join("\n");

  sendMessage(chatId, report);
}


function resetSheet(chatId) {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getActiveSheet();
  sheet.clear();
  sheet.appendRow(["Thời gian", "Loại", "Số tiền", "Mô tả"]);
  sendMessage(chatId, "Đã xóa toàn bộ dữ liệu.");
}

function undoLast(chatId) {
  const sheet = getOrCreateMonthlySheet();
  const lastRow = sheet.getLastRow();
  
  if (lastRow > 1) {
    sheet.deleteRow(lastRow);
    sendMessage(chatId, "Đã xóa giao dịch gần nhất.");
  } else {
    sendMessage(chatId, "Không có giao dịch nào để xóa.");
  }
}


function isValidDate(date, filter, now) {
  if (filter === "month") {
    return (
      date.getMonth() === now.getMonth() &&
      date.getFullYear() === now.getFullYear()
    );
  }
  if (filter === "week") {
    const { startOfWeek, endOfWeek } = now;
    return date >= startOfWeek && date <= endOfWeek;
  }
  return true;
}

function parseDate(filter, dateParam) {
  if (!dateParam) return new Date();
  const parts = dateParam.split("/");
  if (filter === "month" && parts.length === 2) {
    return new Date(parts[1], parts[0] - 1);
  }
  if (filter === "week" && parts.length === 3) {
    const date = new Date(parts[2], parts[1] - 1, parts[0]);
    const dayOfWeek = date.getDay() || 7;
    date.startOfWeek = new Date(date);
    date.startOfWeek.setDate(date.getDate() - dayOfWeek + 1);
    date.endOfWeek = new Date(date.startOfWeek);
    date.endOfWeek.setDate(date.startOfWeek.getDate() + 6);
    return date;
  }
  return new Date();
}

function isValidAmount(amount) {
  return /^[0-9]+(k|tr)?$/.test(amount);
}

function parseAmount(amount) {
  return parseFloat(amount.replace("tr", "000000").replace("k", "000")) || 0;
}

function formatCurrency(amount) {
  return new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(amount);
}

function sendMessage(recipientId, text) {
  const payload = {
    recipient: { id: recipientId },
    message: { text: text }
  };

  UrlFetchApp.fetch(API_URL, {
    method: "post",
    contentType: "application/json",
    payload: JSON.stringify(payload),
  });
}
function getOrCreateMonthlySheet() {
  const spreadsheet = SpreadsheetApp.openById(SHEET_ID);
  const now = new Date();
  const month = String(now.getMonth() + 1).padStart(2, '0'); // Định dạng hai chữ số cho tháng
  const year = now.getFullYear();
  const monthName = `${month}/${year}`; // Tên sheet dạng MM/YYYY
  
  let sheet = spreadsheet.getSheetByName(monthName);
  
  if (!sheet) {
    sheet = spreadsheet.insertSheet(monthName);
    // Đặt tiêu đề cho các cột
    sheet.appendRow(["Thời gian", "Loại", "Số tiền", "Mô tả"]);
  }

  // Định dạng cột số tiền
  const range = sheet.getRange(2, 3, sheet.getLastRow(), 1); // Cột số tiền bắt đầu từ hàng 2
  range.setNumberFormat("#,##0");
  
  return sheet;
}
function handleLastTransaction(chatId) {
  const sheet = getOrCreateMonthlySheet();
  const lastTransaction = getLastTransactionDetails(sheet);

  if (lastTransaction === "Không có dữ liệu.") {
    sendMessage(chatId, lastTransaction);
  } else {
    sendMessage(chatId, `Giao dịch gần nhất của bạn:\nLoại: ${lastTransaction.type}\nSố tiền: ${lastTransaction.amount}\nMô tả: ${lastTransaction.description}`);
  }
}
function getLastTransactionDetails(sheet) {
  const lastRow = getLastRowWithData(sheet, 'C'); // Giả sử cột C là cột Số tiền
  if (lastRow <= 1) {
    return "Không có dữ liệu.";
  }

  const range = sheet.getRange(lastRow, 2, 1, 3); // Lấy cột B (Loại), C (Số tiền), và D (Mô tả) của dòng cuối
  const values = range.getValues()[0];

  return {
    type: values[0], // Loại giao dịch
    amount: values[1], // Số tiền
    description: values[2] // Mô tả
  };
}
function getLastRowWithData(sheet, column) {
  const columnRange = sheet.getRange(`${column}1:${column}${sheet.getLastRow()}`);
  const values = columnRange.getValues();
  for (let i = values.length - 1; i >= 0; i--) {
    if (values[i][0] !== "") {
      return i + 1;
    }
  }
  return 0;
}





